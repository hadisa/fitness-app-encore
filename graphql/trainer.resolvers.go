package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"errors"
	"fmt"

	"encore.app/graphql/generated"
	"encore.app/graphql/model"
	"encore.app/trainee"
	"encore.app/trainer"
	"encore.app/trainer/util"
)

// Client is the resolver for the client field.
func (r *appointmentResolver) Client(ctx context.Context, obj *trainer.Appointment) (*trainee.Trainee, error) {
	panic(fmt.Errorf("not implemented: Client - client"))
}

// Status is the resolver for the status field.
func (r *appointmentResolver) Status(ctx context.Context, obj *trainer.Appointment) (model.AppointmentStatus, error) {
	panic(fmt.Errorf("not implemented: Status - status"))
}

// UpdateTrainerProfile is the resolver for the updateTrainerProfile field.
func (r *mutationResolver) UpdateTrainerProfile(ctx context.Context, input model.TrainerInput) (*trainee.Trainer, error) {
	userID, ok := ctx.Value("userID").(string)
	if !ok || userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}

	// Convert input to trainer service request
	req := &trainer.UpdateProfileRequest{
		TrainerID:         userID,
		Specialization:    input.Specialization,
		YearsOfExperience: input.YearsOfExperience,
		Bio:               input.Bio,
		HourlyRate:        input.HourlyRate,
	}

	// Call trainer service
	updatedTrainer, err := trainer.UpdateTrainerProfile(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("failed to update trainer profile: %w", err)
	}

	// Convert trainer.Trainer to trainee.Trainer
	return &trainee.Trainer{
		ID:                updatedTrainer.ID,
		UserID:            updatedTrainer.UserID,
		Specialization:    updatedTrainer.Specialization,
		YearsOfExperience: updatedTrainer.YearsOfExperience,
		Rating:            updatedTrainer.Rating,
		// Note: You might need to convert certifications if they exist in trainee.Trainer
	}, nil
}

// UpdateTrainerCertifications is the resolver for the updateTrainerCertifications field.
// UpdateTrainerCertifications is the resolver for the updateTrainerCertifications field.
func (r *mutationResolver) UpdateTrainerCertifications(ctx context.Context, input []*model.CertificationInput) ([]*trainer.Certification, error) {
	// Get current user ID from context (assuming it's set by auth middleware)
	userID, ok := ctx.Value("userID").(string)
	if !ok || userID == "" {
		return nil, fmt.Errorf("unauthorized")
	}

	// Convert GraphQL input to service request format
	var certifications []trainer.Certification
	for _, certInput := range input {
		if certInput == nil {
			continue
		}

		certifications = append(certifications, trainer.Certification{
			Name:                certInput.Name,
			IssuingOrganization: certInput.IssuingOrganization,
			DateIssued:          certInput.DateIssued,
			CredentialID:        certInput.CredentialID,
		})
	}

	// Create request for trainer service
	req := &trainer.UpdateCertificationsRequest{
		TrainerID:      userID,
		Certifications: certifications,
	}

	// Call trainer service to update certifications
	response, err := trainer.UpdateTrainerCertifications(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("failed to update trainer certifications: %w", err)
	}

	// Convert response to the expected return type
	var result []*trainer.Certification
	for _, cert := range response.Certifications {
		// Create a copy to avoid referencing loop variable
		c := cert
		result = append(result, &c)
	}

	return result, nil
}

// AssignWorkoutToClient is the resolver for the assignWorkoutToClient field.
func (r *mutationResolver) AssignWorkoutToClient(ctx context.Context, clientID string, workoutID string) (bool, error) {
	// Get the authenticated user ID from context
	userID, ok := ctx.Value("userID").(string)
	if !ok || userID == "" {
		return false, errors.New("unauthorized")
	}

	// Validate that the client belongs to the trainer
	isValid, err := util.ValidateClientBelongsToTrainer(ctx, clientID, userID)
	if err != nil {
		return false, fmt.Errorf("failed to validate client: %w", err)
	}
	if !isValid {
		return false, errors.New("client does not belong to this trainer")
	}

	// Validate that the workout belongs to the trainer
	isValid, err = util.ValidateWorkoutBelongsToTrainer(ctx, workoutID, userID)
	if err != nil {
		return false, fmt.Errorf("failed to validate workout: %w", err)
	}
	if !isValid {
		return false, errors.New("workout does not belong to this trainer")
	}

	// Call the trainer service to assign the workout
	_, err = trainer.AssignWorkoutToClient(ctx, &trainer.AssignWorkoutRequest{
		TrainerID: userID,
		ClientID:  clientID,
		WorkoutID: workoutID,
		// No due date in the current API
	})
	if err != nil {
		return false, fmt.Errorf("failed to assign workout: %w", err)
	}

	return true, nil
}

// AssignMealPlanToClient is the resolver for the assignMealPlanToClient field. --------- ----------- ---------
func (r *mutationResolver) AssignMealPlanToClient(ctx context.Context, clientID string, mealPlanID string) (bool, error) {
	panic(fmt.Errorf("not implemented: AssignMealPlanToClient - assignMealPlanToClient"))
}

// CreateWorkoutTemplate is the resolver for the createWorkoutTemplate field.
func (r *mutationResolver) CreateWorkoutTemplate(ctx context.Context, input model.WorkoutInput) (*trainee.Workout, error) {
	panic(fmt.Errorf("not implemented: CreateWorkoutTemplate - createWorkoutTemplate"))
}

// UpdateWorkoutTemplate is the resolver for the updateWorkoutTemplate field.
func (r *mutationResolver) UpdateWorkoutTemplate(ctx context.Context, workoutID string, input model.WorkoutInput) (*trainee.Workout, error) {
	panic(fmt.Errorf("not implemented: UpdateWorkoutTemplate - updateWorkoutTemplate"))
}

// CreateMealPlanTemplate is the resolver for the createMealPlanTemplate field.
func (r *mutationResolver) CreateMealPlanTemplate(ctx context.Context, input model.MealPlanInput) (*model.MealPlan, error) {
	panic(fmt.Errorf("not implemented: CreateMealPlanTemplate - createMealPlanTemplate"))
}

// UpdateMealPlanTemplate is the resolver for the updateMealPlanTemplate field.
func (r *mutationResolver) UpdateMealPlanTemplate(ctx context.Context, mealPlanID string, input model.MealPlanInput) (*model.MealPlan, error) {
	panic(fmt.Errorf("not implemented: UpdateMealPlanTemplate - updateMealPlanTemplate"))
}

// SendTrainerMessage is the resolver for the sendTrainerMessage field.
func (r *mutationResolver) SendTrainerMessage(ctx context.Context, clientID string, content string) (*trainee.Message, error) {
	panic(fmt.Errorf("not implemented: SendTrainerMessage - sendTrainerMessage"))
}

// SetAvailability is the resolver for the setAvailability field.
func (r *mutationResolver) SetAvailability(ctx context.Context, input []*model.AvailabilityInput) ([]*trainer.AvailabilitySlot, error) {
	panic(fmt.Errorf("not implemented: SetAvailability - setAvailability"))
}

// CreateAppointment is the resolver for the createAppointment field.
func (r *mutationResolver) CreateAppointment(ctx context.Context, clientID string, slotID string) (*trainer.Appointment, error) {
	panic(fmt.Errorf("not implemented: CreateAppointment - createAppointment"))
}

// GetTrainerProfile is the resolver for the getTrainerProfile field.
func (r *queryResolver) GetTrainerProfile(ctx context.Context) (*trainee.Trainer, error) {
	panic(fmt.Errorf("not implemented: GetTrainerProfile - getTrainerProfile"))
}

// GetTrainerClients is the resolver for the getTrainerClients field.
func (r *queryResolver) GetTrainerClients(ctx context.Context) ([]*trainee.Trainee, error) {
	panic(fmt.Errorf("not implemented: GetTrainerClients - getTrainerClients"))
}

// GetClientDetails is the resolver for the getClientDetails field.
func (r *queryResolver) GetClientDetails(ctx context.Context, clientID string) (*model.TraineeWithMetrics, error) {
	panic(fmt.Errorf("not implemented: GetClientDetails - getClientDetails"))
}

// GetWorkoutTemplates is the resolver for the getWorkoutTemplates field.
func (r *queryResolver) GetWorkoutTemplates(ctx context.Context) ([]*trainee.Workout, error) {
	panic(fmt.Errorf("not implemented: GetWorkoutTemplates - getWorkoutTemplates"))
}

// GetWorkoutTemplateByID is the resolver for the getWorkoutTemplateById field.
func (r *queryResolver) GetWorkoutTemplateByID(ctx context.Context, workoutID string) (*trainee.Workout, error) {
	panic(fmt.Errorf("not implemented: GetWorkoutTemplateByID - getWorkoutTemplateById"))
}

// GetMealPlanTemplates is the resolver for the getMealPlanTemplates field.
func (r *queryResolver) GetMealPlanTemplates(ctx context.Context) ([]*model.MealPlan, error) {
	panic(fmt.Errorf("not implemented: GetMealPlanTemplates - getMealPlanTemplates"))
}

// GetMealPlanTemplateByID is the resolver for the getMealPlanTemplateById field.
func (r *queryResolver) GetMealPlanTemplateByID(ctx context.Context, mealPlanID string) (*model.MealPlan, error) {
	panic(fmt.Errorf("not implemented: GetMealPlanTemplateByID - getMealPlanTemplateById"))
}

// GetTrainerMessages is the resolver for the getTrainerMessages field.
func (r *queryResolver) GetTrainerMessages(ctx context.Context, clientID *string) ([]*trainee.Message, error) {
	panic(fmt.Errorf("not implemented: GetTrainerMessages - getTrainerMessages"))
}

// GetMyAvailability is the resolver for the getMyAvailability field.
func (r *queryResolver) GetMyAvailability(ctx context.Context) ([]*trainer.AvailabilitySlot, error) {
	panic(fmt.Errorf("not implemented: GetMyAvailability - getMyAvailability"))
}

// GetMyAppointments is the resolver for the getMyAppointments field.
func (r *queryResolver) GetMyAppointments(ctx context.Context) ([]*trainer.Appointment, error) {
	panic(fmt.Errorf("not implemented: GetMyAppointments - getMyAppointments"))
}

// Appointment returns generated.AppointmentResolver implementation.
func (r *Resolver) Appointment() generated.AppointmentResolver { return &appointmentResolver{r} }

type appointmentResolver struct{ *Resolver }
