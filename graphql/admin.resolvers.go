package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"time"

	"encore.app/admin"
	"encore.app/graphql/generated"
	"encore.app/graphql/model"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, user model.UserRegisterRequest) (*admin.AuthResponse, error) {
	// Convert GraphQL input to service input
	params := &admin.RegisterParams{
		Username:   user.Username,
		Email:      user.Email,
		Password:   user.Password,
		Fullname:   user.Fullname,
		Address:    user.Address,
		ProvinceID: user.ProvinceID,
		CityID:     user.CityID,
		DistrictID: user.DistrictID,
	}

	// Call the admin service
	return admin.Register(ctx, params)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*admin.AuthResponse, error) {
	// Call the admin service
	return admin.Login(ctx, &admin.LoginParams{
		Username: username,
		Password: password,
	})
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*admin.ProfileResponse, error) {
	// Call the admin service
	return admin.GetProfile(ctx)
}

// CreatedAt is the resolver for the created_at field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *admin.User) (*string, error) {
	if obj == nil {
		return nil, nil
	}
	formatted := obj.CreatedAt.Format(time.RFC3339)
	return &formatted, nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *userResolver) UpdatedAt(ctx context.Context, obj *admin.User) (*string, error) {
	if obj == nil {
		return nil, nil
	}
	formatted := obj.UpdatedAt.Format(time.RFC3339)
	return &formatted, nil
}

// Province is the resolver for the province field.
func (r *userDetailResolver) Province(ctx context.Context, obj *admin.UserDetail) (*model.Province, error) {
	if obj == nil || obj.ProvinceID == nil {
		return nil, nil
	}
	// In a real app, you would fetch the province from the database
	return &model.Province{
		ID:   *obj.ProvinceID,
		Name: "", // You would fetch the actual name from the database
	}, nil
}

// District is the resolver for the district field.
func (r *userDetailResolver) District(ctx context.Context, obj *admin.UserDetail) (*model.District, error) {
	if obj == nil || obj.DistrictID == nil {
		return nil, nil
	}
	// In a real app, you would fetch the district from the database
	return &model.District{
		ID:   *obj.DistrictID,
		Name: "", // You would fetch the actual name from the database
	}, nil
}

// City is the resolver for the city field.
func (r *userDetailResolver) City(ctx context.Context, obj *admin.UserDetail) (*model.City, error) {
	if obj == nil || obj.CityID == nil {
		return nil, nil
	}
	// In a real app, you would fetch the city from the database
	return &model.City{
		ID:   *obj.CityID,
		Name: "", // You would fetch the actual name from the database
	}, nil
}

// CreatedAt is the resolver for the created_at field.
func (r *userDetailResolver) CreatedAt(ctx context.Context, obj *admin.UserDetail) (*string, error) {
	if obj == nil {
		return nil, nil
	}
	formatted := obj.CreatedAt.Format(time.RFC3339)
	return &formatted, nil
}

// UpdatedAt is the resolver for the updated_at field.
func (r *userDetailResolver) UpdatedAt(ctx context.Context, obj *admin.UserDetail) (*string, error) {
	if obj == nil {
		return nil, nil
	}
	formatted := obj.UpdatedAt.Format(time.RFC3339)
	return &formatted, nil
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

// UserDetail returns generated.UserDetailResolver implementation.
func (r *Resolver) UserDetail() generated.UserDetailResolver { return &userDetailResolver{r} }

type userResolver struct{ *Resolver }
type userDetailResolver struct{ *Resolver }
