// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"

	"encore.app/trainee"
)

type Node interface {
	IsNode()
	GetID() string
}

type AvailabilityInput struct {
	DayOfWeek   int    `json:"dayOfWeek"`
	StartTime   string `json:"startTime"`
	EndTime     string `json:"endTime"`
	IsRecurring bool   `json:"isRecurring"`
}

type BodyFatEntry struct {
	Date  string  `json:"date"`
	Value float64 `json:"value"`
}

type CertificationInput struct {
	Name                string  `json:"name"`
	IssuingOrganization string  `json:"issuingOrganization"`
	DateIssued          string  `json:"dateIssued"`
	CredentialID        *string `json:"credentialId,omitempty"`
}

type City struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type DeletionResponse struct {
	Success bool    `json:"success"`
	Message *string `json:"message,omitempty"`
}

type District struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Error struct {
	Field   string `json:"field"`
	Message string `json:"message"`
}

type Exercise struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Description string  `json:"description"`
	MuscleGroup *string `json:"muscleGroup,omitempty"`
	Equipment   *string `json:"equipment,omitempty"`
}

type ExerciseInput struct {
	Name        string  `json:"name"`
	Description string  `json:"description"`
	MuscleGroup *string `json:"muscleGroup,omitempty"`
	Equipment   *string `json:"equipment,omitempty"`
}

type Macros struct {
	Protein float64 `json:"protein"`
	Carbs   float64 `json:"carbs"`
	Fat     float64 `json:"fat"`
}

type MacrosInput struct {
	Protein float64 `json:"protein"`
	Carbs   float64 `json:"carbs"`
	Fat     float64 `json:"fat"`
}

type Meal struct {
	ID           string   `json:"id"`
	Name         string   `json:"name"`
	Description  string   `json:"description"`
	Ingredients  []string `json:"ingredients"`
	Instructions *string  `json:"instructions,omitempty"`
	Calories     int      `json:"calories"`
	Macros       *Macros  `json:"macros"`
	MealType     MealType `json:"mealType"`
}

type MealInput struct {
	Name         string       `json:"name"`
	Description  string       `json:"description"`
	Ingredients  []string     `json:"ingredients"`
	Instructions *string      `json:"instructions,omitempty"`
	Calories     int          `json:"calories"`
	Macros       *MacrosInput `json:"macros"`
	MealType     MealType     `json:"mealType"`
}

type MealPlan struct {
	ID          string           `json:"id"`
	Name        string           `json:"name"`
	Description string           `json:"description"`
	Meals       []*Meal          `json:"meals"`
	Calories    int              `json:"calories"`
	Macros      *Macros          `json:"macros"`
	CreatedBy   *trainee.Trainer `json:"createdBy,omitempty"`
}

type MealPlanInput struct {
	Name        string       `json:"name"`
	Description string       `json:"description"`
	Meals       []*MealInput `json:"meals"`
	Calories    int          `json:"calories"`
	Macros      *MacrosInput `json:"macros"`
}

type Mutation struct {
}

type NutritionLog struct {
	ID          string  `json:"id"`
	Meal        *Meal   `json:"meal"`
	Date        string  `json:"date"`
	Time        string  `json:"time"`
	PortionSize *string `json:"portionSize,omitempty"`
	Notes       *string `json:"notes,omitempty"`
}

type NutritionLogInput struct {
	MealID      string  `json:"mealId"`
	Date        string  `json:"date"`
	Time        string  `json:"time"`
	PortionSize *string `json:"portionSize,omitempty"`
	Notes       *string `json:"notes,omitempty"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type PaginationInput struct {
	First  *int    `json:"first,omitempty"`
	After  *string `json:"after,omitempty"`
	Last   *int    `json:"last,omitempty"`
	Before *string `json:"before,omitempty"`
}

type ProgressMetrics struct {
	Weight   []*WeightEntry   `json:"weight"`
	BodyFat  []*BodyFatEntry  `json:"bodyFat"`
	Strength []*StrengthEntry `json:"strength"`
}

type Province struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Query struct {
}

type StrengthEntry struct {
	ExerciseID string  `json:"exerciseId"`
	Date       string  `json:"date"`
	MaxWeight  float64 `json:"maxWeight"`
}

type TraineeInput struct {
	Age          *int     `json:"age,omitempty"`
	Height       *float64 `json:"height,omitempty"`
	Weight       *float64 `json:"weight,omitempty"`
	FitnessGoals []string `json:"fitnessGoals,omitempty"`
	Injuries     []string `json:"injuries,omitempty"`
	Preferences  []string `json:"preferences,omitempty"`
}

type TraineeWithMetrics struct {
	Trainee       *trainee.Trainee            `json:"trainee"`
	Metrics       *ProgressMetrics            `json:"metrics"`
	LastWorkouts  []*trainee.CompletedWorkout `json:"lastWorkouts"`
	NutritionLogs []*NutritionLog             `json:"nutritionLogs"`
}

type TrainerInput struct {
	Specialization    []string `json:"specialization,omitempty"`
	YearsOfExperience *int     `json:"yearsOfExperience,omitempty"`
	Bio               *string  `json:"bio,omitempty"`
	HourlyRate        *float64 `json:"hourlyRate,omitempty"`
}

type UserRegisterRequest struct {
	Username   string  `json:"username"`
	Email      string  `json:"email"`
	Password   string  `json:"password"`
	Fullname   string  `json:"fullname"`
	Address    *string `json:"address,omitempty"`
	ProvinceID *int    `json:"province_id,omitempty"`
	CityID     *int    `json:"city_id,omitempty"`
	DistrictID *int    `json:"district_id,omitempty"`
}

type WeightEntry struct {
	Date  string  `json:"date"`
	Value float64 `json:"value"`
}

type WorkoutInput struct {
	Name        string           `json:"name"`
	Description string           `json:"description"`
	Exercises   []*ExerciseInput `json:"exercises"`
	Duration    int              `json:"duration"`
	Difficulty  DifficultyLevel  `json:"difficulty"`
}

type WorkoutLogInput struct {
	WorkoutID string  `json:"workoutId"`
	Duration  int     `json:"duration"`
	Notes     *string `json:"notes,omitempty"`
	Rating    *int    `json:"rating,omitempty"`
}

type AppointmentStatus string

const (
	AppointmentStatusScheduled AppointmentStatus = "SCHEDULED"
	AppointmentStatusCompleted AppointmentStatus = "COMPLETED"
	AppointmentStatusCancelled AppointmentStatus = "CANCELLED"
	AppointmentStatusNoshow    AppointmentStatus = "NOSHOW"
)

var AllAppointmentStatus = []AppointmentStatus{
	AppointmentStatusScheduled,
	AppointmentStatusCompleted,
	AppointmentStatusCancelled,
	AppointmentStatusNoshow,
}

func (e AppointmentStatus) IsValid() bool {
	switch e {
	case AppointmentStatusScheduled, AppointmentStatusCompleted, AppointmentStatusCancelled, AppointmentStatusNoshow:
		return true
	}
	return false
}

func (e AppointmentStatus) String() string {
	return string(e)
}

func (e *AppointmentStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppointmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppointmentStatus", str)
	}
	return nil
}

func (e AppointmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *AppointmentStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e AppointmentStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type DifficultyLevel string

const (
	DifficultyLevelBeginner     DifficultyLevel = "BEGINNER"
	DifficultyLevelIntermediate DifficultyLevel = "INTERMEDIATE"
	DifficultyLevelAdvanced     DifficultyLevel = "ADVANCED"
)

var AllDifficultyLevel = []DifficultyLevel{
	DifficultyLevelBeginner,
	DifficultyLevelIntermediate,
	DifficultyLevelAdvanced,
}

func (e DifficultyLevel) IsValid() bool {
	switch e {
	case DifficultyLevelBeginner, DifficultyLevelIntermediate, DifficultyLevelAdvanced:
		return true
	}
	return false
}

func (e DifficultyLevel) String() string {
	return string(e)
}

func (e *DifficultyLevel) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DifficultyLevel(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DifficultyLevel", str)
	}
	return nil
}

func (e DifficultyLevel) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *DifficultyLevel) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e DifficultyLevel) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type MealType string

const (
	MealTypeBreakfast MealType = "BREAKFAST"
	MealTypeLunch     MealType = "LUNCH"
	MealTypeDinner    MealType = "DINNER"
	MealTypeSnack     MealType = "SNACK"
)

var AllMealType = []MealType{
	MealTypeBreakfast,
	MealTypeLunch,
	MealTypeDinner,
	MealTypeSnack,
}

func (e MealType) IsValid() bool {
	switch e {
	case MealTypeBreakfast, MealTypeLunch, MealTypeDinner, MealTypeSnack:
		return true
	}
	return false
}

func (e MealType) String() string {
	return string(e)
}

func (e *MealType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MealType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MealType", str)
	}
	return nil
}

func (e MealType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *MealType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e MealType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type PhotoAngle string

const (
	PhotoAngleFront PhotoAngle = "FRONT"
	PhotoAngleSide  PhotoAngle = "SIDE"
	PhotoAngleBack  PhotoAngle = "BACK"
)

var AllPhotoAngle = []PhotoAngle{
	PhotoAngleFront,
	PhotoAngleSide,
	PhotoAngleBack,
}

func (e PhotoAngle) IsValid() bool {
	switch e {
	case PhotoAngleFront, PhotoAngleSide, PhotoAngleBack:
		return true
	}
	return false
}

func (e PhotoAngle) String() string {
	return string(e)
}

func (e *PhotoAngle) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PhotoAngle(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PhotoAngle", str)
	}
	return nil
}

func (e PhotoAngle) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *PhotoAngle) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e PhotoAngle) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
